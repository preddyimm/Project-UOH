#Converting data from excel into usable form
import pandas as pd
df = pd.read_excel("Data.xlsx", sheet_name=0)
# insert the name of the column as a string in brackets
time = list(df['Time'])
data = list(df['Open'])

#Mean of the time series
x_bar = sum(data)/len(data)


#Doing Step 1 of building a profile
y = []
for i in range(len(data)):
    sum = 0
    for k in range(i + 1):
        sum = sum + data[k] - x_bar
    y.append(sum)
        

#Doing Step 2 of method
#Choosing the value of s to be 12
#so Ns to be divided into groups of 186
#As N is 2234, the last list will have 188
s = 186
Ns = 12


#dividing into 12 equal parts
window1 = y[:s]
window2 = y[s:s*2]
window3 = y[s*2:s*3]
window4 = y[s*3:s*4]
window5 = y[s*4:s*5]
window6 = y[s*5:s*6]
window7 = y[s*6:s*7]
window8 = y[s*7:s*8]
window9 = y[s*8:s*9]
window10 = y[s*9:s*10]
window11 = y[s*10:s*11]
window12 = y[s*11:s*12]


import numpy as np
y1 = np.array(window1)
y2 = np.array(window2)
y3 = np.array(window3)
y4 = np.array(window4)
y5 = np.array(window5)
y6 = np.array(window6)
y7 = np.array(window7)
y8 = np.array(window8)
y9 = np.array(window9)
y10 = np.array(y[s*9:s*10])
y11 = np.array(y[s*10:s*11])
y12 = np.array(y[s*11:s*12])
x = np.array(list(range(1,s + 1)))


#Finding coefficients for the linear square fit
m1,c1 = np.linalg.lstsq(np.vstack([x, np.ones(len(x))]).T, y1, rcond=None)[0]
m2,c2 = np.linalg.lstsq(np.vstack([x, np.ones(len(x))]).T, y2, rcond=None)[0]
m3,c3 = np.linalg.lstsq(np.vstack([x, np.ones(len(x))]).T, y3, rcond=None)[0]
m4,c4 = np.linalg.lstsq(np.vstack([x, np.ones(len(x))]).T, y4, rcond=None)[0]
m5,c5 = np.linalg.lstsq(np.vstack([x, np.ones(len(x))]).T, y5, rcond=None)[0]
m6,c6 = np.linalg.lstsq(np.vstack([x, np.ones(len(x))]).T, y6, rcond=None)[0]
m7,c7 = np.linalg.lstsq(np.vstack([x, np.ones(len(x))]).T, y7, rcond=None)[0]
m8,c8 = np.linalg.lstsq(np.vstack([x, np.ones(len(x))]).T, y8, rcond=None)[0]
m9,c9 = np.linalg.lstsq(np.vstack([x, np.ones(len(x))]).T, y9, rcond=None)[0]
m10,c10 = np.linalg.lstsq(np.vstack([x, np.ones(len(x))]).T, y10, rcond=None)[0]
m11,c11 = np.linalg.lstsq(np.vstack([x, np.ones(len(x))]).T, y11, rcond=None)[0]
m12,c12 = np.linalg.lstsq(np.vstack([x, np.ones(len(x))]).T, y12, rcond=None)[0]


#Each segment according to its polynomial generated by curve fitting

v1 = []
v2 = []
v3 = []
v4 = []
v5 = []
v6 = []
v7 = []
v8 = []
v9 = []
v10 = []
v11 = []
v12 = []

for i in range (1, 187):
    v1.append(m1*i + c1)
    v2.append(m2*i + c2)
    v3.append(m3*i + c3)
    v4.append(m4*i + c4)
    v5.append(m5*i + c5)
    v6.append(m6*i + c6)
    v7.append(m7*i + c7)
    v8.append(m8*i + c8)
    v9.append(m9*i + c9)
    v10.append(m10*i + c10)
    v11.append(m11*i + c11)
    v12.append(m12*i + c12)

#calculating variance of the segments

var_1 = 0
var_2 = 0
var_3 = 0
var_4 = 0
var_5 = 0
var_6 = 0
var_7 = 0
var_8 = 0
var_9 = 0
var_10 = 0
var_11 = 0
var_12 = 0

for i in range(s):
    var_1 = var_1 + ((window1[i] - v1[i])**2/s)
    var_2 = var_2 + ((window2[i] - v2[i])**2/s)
    var_3 = var_3 + ((window3[i] - v3[i])**2/s)
    var_4 = var_4 + ((window4[i] - v4[i])**2/s)
    var_5 = var_5 + ((window5[i] - v5[i])**2/s)
    var_6 = var_6 + ((window6[i] - v6[i])**2/s)
    var_7 = var_7 + ((window7[i] - v7[i])**2/s)
    var_8 = var_8 + ((window8[i] - v8[i])**2/s)
    var_9 = var_9 + ((window9[i] - v9[i])**2/s)
    var_10 = var_10 + ((window10[i] - v10[i])**2/s)
    var_11 = var_11 + ((window11[i] - v11[i])**2/s)
    var_12 = var_12 + ((window12[i] - v12[i])**2/s)


var_list =[var_1] + [var_2] + [var_3] + [var_4] + [var_5] + [var_6] + [var_7] + [var_8] + [var_9] + [var_10] + [var_11] + [var_12]


def fluc_fun(q, lis):
    f_q_s = 0
    if q != 0:
        for i in lis:
          f_q_s += i**(q/2)/Ns
        return f_q_s**(1/q)
    else:
        abc = 0
        for i in lis:
            abc += np.log(i)/(2*Ns)
        return math.exp(abc)
f_0_s = abc/2*Ns
f_1_s = fluc_fun(1, var_list)
f_2_s = fluc_fun(2, var_list)
f_3_s = fluc_fun(3, var_list)
f_4_s = fluc_fun(4, var_list)
f_5_s = fluc_fun(5, var_list)
f_6_s = fluc_fun(6, var_list)
f_7_s = fluc_fun(7, var_list)
f_8_s = fluc_fun(8, var_list)
f_9_s = fluc_fun(9, var_list)
f_10_s = fluc_fun(10, var_list)
f_11_s = fluc_fun(11, var_list)
f_12_s = fluc_fun(12, var_list)


f_s = []
for i in range(1,13):
    f_s.append(fluc_fun(i, var_list))


import matplotlib.pyplot as plt

numb = list(range(1, 13))
plt.plot(numb, f_s)

plt.xlabel('q')
plt.ylabel('fluctuation function')

plt.title('graph')
plt.show()

print(f_s)



